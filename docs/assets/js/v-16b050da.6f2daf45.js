"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5129],{4468:(e,n,l)=>{l.r(n),l.d(n,{data:()=>t});const t={key:"v-16b050da",path:"/vuepress-next/reference/components.html",title:"Built-in Components",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"ClientOnly",slug:"clientonly",children:[]},{level:2,title:"Content",slug:"content",children:[]}],git:{updatedTime:1639839959e3,contributors:[{name:"Starzkg",email:"1600337300@qq.com",commits:1},{name:"shentuzhigang",email:"shentuzhigang@moresec.cn",commits:1}]},readingTime:{minutes:.58,words:175},filePathRelative:"vuepress-next/reference/components.md",content:'# Built-in Components\n\n<NpmBadge package="@vuepress/client" />\n\n## ClientOnly\n\n- Usage:\n\n```md\n<ClientOnly>\n  <NonSsrFriendlyComponent />\n</ClientOnly>\n```\n\n- Details:\n\n  This component and its children will only be rendered in client-side. That means, it will not be rendered to HTML during build (SSR).\n\n  If a component is trying to access Browser / DOM APIs directly in `setup()`, an error will occur during build because those APIs are unavailable in Node.js environment. In such case, you could do either:\n\n  - Modify the component to only access Browser / DOM APIs in `onBeforeMount()` or `onMounted()` hook.\n  - Wrap the component with `<ClientOnly>`.\n\n## Content\n\n- Props:\n  - pageKey\n    - Type: `string`\n    - Required: `false`\n\n- Usage:\n\n```md\n<Content page-key="v-xxxxxx" />\n```\n\n- Details:\n\n  This component will render the Markdown content of a page.\n\n  The page key is the [name](https://next.router.vuejs.org/api/#name-2) of the page route. If the `pageKey` prop is not provided, it will render the page of current route.\n\n  This component is mainly for developing themes. You won\'t need it in most cases.\n\n- Also see:\n  - [Node API > Page Properties > key](./node-api.md#key)\n'}},30361:(e,n,l)=>{l.r(n),l.d(n,{default:()=>d});var t=l(66252);const o=(0,t._)("h1",{id:"built-in-components",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#built-in-components","aria-hidden":"true"},"#"),(0,t.Uk)(" Built-in Components")],-1),i=(0,t.uE)('<h2 id="clientonly" tabindex="-1"><a class="header-anchor" href="#clientonly" aria-hidden="true">#</a> ClientOnly</h2><ul><li>Usage:</li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">&lt;ClientOnly&gt;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  &lt;NonSsrFriendlyComponent /&gt;</span></span>\n<span class="line"><span style="color:#D4D4D4;">&lt;/ClientOnly&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>Details:</p><p>This component and its children will only be rendered in client-side. That means, it will not be rendered to HTML during build (SSR).</p><p>If a component is trying to access Browser / DOM APIs directly in <code>setup()</code>, an error will occur during build because those APIs are unavailable in Node.js environment. In such case, you could do either:</p><ul><li>Modify the component to only access Browser / DOM APIs in <code>onBeforeMount()</code> or <code>onMounted()</code> hook.</li><li>Wrap the component with <code>&lt;ClientOnly&gt;</code>.</li></ul></li></ul><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> Content</h2><ul><li><p>Props:</p><ul><li>pageKey <ul><li>Type: <code>string</code></li><li>Required: <code>false</code></li></ul></li></ul></li><li><p>Usage:</p></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">&lt;Content page-key=&quot;v-xxxxxx&quot; /&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',7),s=(0,t._)("li",null,[(0,t._)("p",null,"Details:"),(0,t._)("p",null,"This component will render the Markdown content of a page."),(0,t._)("p",null,[(0,t.Uk)("The page key is the "),(0,t._)("a",{href:"https://next.router.vuejs.org/api/#name-2",target:"_blank",rel:"noopener noreferrer"},"name"),(0,t.Uk)(" of the page route. If the "),(0,t._)("code",null,"pageKey"),(0,t.Uk)(" prop is not provided, it will render the page of current route.")]),(0,t._)("p",null,"This component is mainly for developing themes. You won't need it in most cases.")],-1),a=(0,t._)("p",null,"Also see:",-1),r=(0,t.Uk)("Node API > Page Properties > key"),c={},d=(0,l(83744).Z)(c,[["render",function(e,n){const l=(0,t.up)("NpmBadge"),c=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[o,(0,t.Wm)(l,{package:"@vuepress/client"}),i,(0,t._)("ul",null,[s,(0,t._)("li",null,[a,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(c,{to:"/vuepress-next/reference/node-api.html#key"},{default:(0,t.w5)((()=>[r])),_:1})])])])])],64)}]])}}]);