"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9165],{93106:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-f5e69ebe",path:"/zh/vuepress-next/reference/plugin-api.html",title:"插件 API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概览",slug:"概览",children:[]},{level:2,title:"基础配置项",slug:"基础配置项",children:[{level:3,title:"name",slug:"name",children:[]},{level:3,title:"multiple",slug:"multiple",children:[]}]},{level:2,title:"开发 Hooks",slug:"开发-hooks",children:[{level:3,title:"alias",slug:"alias",children:[]},{level:3,title:"define",slug:"define",children:[]},{level:3,title:"extendsMarkdownOptions",slug:"extendsmarkdownoptions",children:[]},{level:3,title:"extendsMarkdown",slug:"extendsmarkdown",children:[]},{level:3,title:"extendsPageOptions",slug:"extendspageoptions",children:[]},{level:3,title:"extendsPage",slug:"extendspage",children:[]}]},{level:2,title:"客户端文件 Hooks",slug:"客户端文件-hooks",children:[{level:3,title:"clientAppEnhanceFiles",slug:"clientappenhancefiles",children:[]},{level:3,title:"clientAppRootComponentFiles",slug:"clientapprootcomponentfiles",children:[]},{level:3,title:"clientAppSetupFiles",slug:"clientappsetupfiles",children:[]}]},{level:2,title:"生命周期 Hooks",slug:"生命周期-hooks",children:[{level:3,title:"onInitialized",slug:"oninitialized",children:[]},{level:3,title:"onPrepared",slug:"onprepared",children:[]},{level:3,title:"onWatched",slug:"onwatched",children:[]},{level:3,title:"onGenerated",slug:"ongenerated",children:[]}]}],git:{updatedTime:1639839959e3,contributors:[{name:"Starzkg",email:"1600337300@qq.com",commits:1},{name:"shentuzhigang",email:"shentuzhigang@moresec.cn",commits:1}]},readingTime:{minutes:4.83,words:1449},filePathRelative:"zh/vuepress-next/reference/plugin-api.md",content:"# 插件 API\n\n<NpmBadge package=\"@vuepress/core\" />\n\n插件 API 是由 [@vuepress/core](https://www.npmjs.com/package/@vuepress/core) 包支持的。你可以查看 [Node API](./node-api.md) 来了解如何使用插件 Hooks 中的 VuePress App 实例。\n\n## 概览\n\n插件需要在初始化之前使用。基础配置项会在使用插件时立即被处理：\n\n- [name](#name)\n- [multiple](#multiple)\n\n下列 Hooks 会在初始化 App 时处理：\n\n- [extendsMarkdownOptions](#extendsmarkdownoptions)\n- [extendsMarkdown](#extendsmarkdown)\n- [extendsPageOptions](#extendspageoptions)\n- [extendsPage](#extendspage)\n- [onInitialized](#oninitialized)\n\n下列 Hooks 会在准备文件时处理：\n\n- [clientAppEnhanceFiles](#clientappenhancefiles)\n- [clientAppRootComponentFiles](#clientapprootcomponentfiles)\n- [clientAppSetupFiles](#clientappsetupfiles)\n- [onPrepared](#onprepared)\n\n下列 Hooks 会在 dev / build 时处理：\n\n- [alias](#alias)\n- [define](#define)\n- [onWatched](#onwatched)\n- [onGenerated](#ongenerated)\n\n> 查看 [深入 > 架构 > 核心流程与 Hooks](../advanced/architecture.md#核心流程与-hooks) 来更好地理解该流程。\n\n## 基础配置项\n\n### name\n\n- 类型： `string`\n\n- 详情：\n\n  插件的名称。\n\n  它会被用来识别插件，以避免多次使用同一个插件，因此应确保你的插件名称是独一无二的。\n\n  它应遵从如下命名约定：\n\n  - 非 Scoped: `vuepress-plugin-foo`\n  - Scoped: `@org/vuepress-plugin-foo`\n\n- 参考：\n  - [插件 API > multiple](#multiple)\n\n### multiple\n\n- 类型： `boolean`\n\n- 默认值： `false`\n\n- 详情：\n\n  插件是否能够被多次使用。\n\n  如果设置为 `false` ，当有相同名称的插件被使用时，先使用的会被后使用的替换掉。\n\n  如果设置为 `true` ，相同名称的插件可以被多次使用且不会被替换。\n\n- 参考：\n  - [插件 API > name](#name)\n\n## 开发 Hooks\n\n### alias\n\n- 类型： `Record<string, any> | ((app: App) => Record<string, any>)`\n\n- 详情：\n\n  定义路径别名。\n\n  该 Hook 接收一个对象，或者一个返回对象的函数。\n\n- 示例：\n\n```js\nmodule.exports = {\n  alias: {\n    '@alias': path.resolve(__dirname, './path/to/alias'),\n  },\n}\n```\n\n### define\n\n- 类型： `Record<string, any> | ((app: App) => Record<string, any>)`\n\n- 详情：\n\n  定义全局常量。\n\n  该 Hook 接收一个对象，或者一个返回对象的函数。\n\n  它可以被用于向客户端文件传递变量。注意这里的值都会自动被 `JSON.stringify()` 处理。\n\n- 示例：\n\n```js\nmodule.exports = {\n  define: {\n    __GLOBAL_BOOLEAN__: true,\n    __GLOBAL_STRING__: 'foobar',\n    __GLOBAL_OBJECT__: { foo: 'bar' },\n  },\n}\n```\n\n### extendsMarkdownOptions\n\n- 类型： `(options: MarkdownOptions, app: App) => void | Promise<void>`\n\n- 详情：\n\n  Markdown 配置项扩展。\n\n  该 Hook 接收一个函数，在参数中会收到 Markdown 配置项。\n\n  该 Hook 可以用于修改 Markdown 配置项。\n\n- 示例：\n\n修改默认提取的子标题层级：\n\n```js\nmodule.exports = {\n  extendsMarkdownOptions: (markdownOptions, app) => {\n    if (markdownOptions.extractHeaders === false) return\n    markdownOptions.extractHeaders = markdownOptions.extractHeaders ?? {}\n    if (markdownOptions.extractHeaders.level) return\n    markdownOptions.extractHeaders.level = [2, 3, 4, 5, 6]\n  },\n}\n```\n\n- 参考：\n  - [配置 > markdown](./config.md#markdown)\n\n### extendsMarkdown\n\n- 类型： `(md: Markdown, app: App) => void | Promise<void>`\n\n- 详情：\n\n  Markdown 增强。\n\n  该 Hook 接收一个函数，在参数中会收到一个由 [markdown-it](https://github.com/markdown-it/markdown-it) 提供的 `Markdown` 实例。\n\n  该 Hook 可以用来添加额外的 markdown-it 插件、应用额外的自定义功能。\n\n- 示例：\n\n```js\nmodule.exports = {\n  extendsMarkdown: (md) => {\n    md.use(plugin1)\n    md.linkify.set({ fuzzyEmail: false })\n  },\n}\n```\n\n### extendsPageOptions\n\n- 类型： `(options: PageOptions, app: App) => void | Promise<void>`\n\n- 详情：\n\n  页面配置项扩展。\n\n  该 Hook 接收一个函数，在参数中会收到 `createPage` 传入的配置项。\n\n  该 Hook 可以用于修改页面配置项。\n\n- 示例：\n\n为 `_posts` 目录下的页面设置永久链接 Pattern ：\n\n```js\nmodule.exports = {\n  extendsPageOptions: (pageOptions, app) => {\n    if (pageOptions.filePath?.startsWith(app.dir.source('_posts/'))) {\n      pageOptions.frontmatter = pageOptions.frontmatter ?? {}\n      pageOptions.frontmatter.permalinkPattern = '/:year/:month/:day/:slug.html'\n    }\n  },\n}\n```\n\n- 参考：\n  - [Node API > Page > createPage](./node-api.md#createPage)\n\n### extendsPage\n\n- 类型： `(page: Page, app: App) => void | Promise<void>`\n\n- 详情：\n\n  页面扩展。\n\n  该 Hook 接收一个函数，在参数中会收到一个 `Page` 实例。\n\n  该 Hook 可以用来在 Page 对象上添加额外的属性，或修改现有的属性等。\n\n  值得一提的是，针对 `page.data` 和 `page.routeMeta` 的改动可以在客户端代码中使用。\n\n- 示例：\n\n```js\nmodule.exports = {\n  extendsPage: (page) => {\n    page.foo = 'foo'\n    page.data.bar = 'bar'\n  },\n}\n```\n\n在客户端组件中：\n\n```js\nimport { usePageData } from '@vuepress/client'\n\nexport default {\n  setup() {\n    const page = usePageData()\n    console.log(page.value.bar) // bar\n  },\n}\n```\n\n- 参考：\n  - [客户端 API > usePageData](./client-api.md#usepagedata)\n  - [Node API > Page 属性 > data](./node-api.md#data)\n  - [Node API > Page 属性 > routeMeta](./node-api.md#routemeta)\n\n## 客户端文件 Hooks\n\n### clientAppEnhanceFiles\n\n- 类型： `string | string[] | ((app: App) => string | string[] | Promise<string | string[]>)`\n\n- 详情：\n\n  Client App Enhancement 文件路径。\n\n  该 Hook 接收文件绝对路径，或者一个返回路径的函数。\n\n  该 Hook 中的文件会在客户端 App 创建后被调用，用以对其进行一些增强。\n\n- 示例：\n\n```js\nconst { path } = require('@vuepress/utils')\n\nmodule.exports = {\n  clientAppEnhanceFiles: path.resolve(\n    __dirname,\n    './path/to/clientAppEnhance.js'\n  ),\n}\n```\n\n- 参考：\n  - [客户端 API > defineClientAppEnhance](./client-api.md#defineclientappenhance)\n  - [Cookbook > Client App Enhance 的使用方法](../advanced/cookbook/usage-of-client-app-enhance.md)\n\n### clientAppRootComponentFiles\n\n- 类型： `string | string[] | ((app: App) => string | string[] | Promise<string | string[]>)`\n\n- 详情：\n\n  Client Root Component 文件路径。\n\n  该 Hook 接收文件绝对路径，或者一个返回路径的函数。\n\n  该 Hook 中的组件会被渲染到客户端 App 的根节点。\n\n- 示例：\n\n```js\nconst { path } = require('@vuepress/utils')\n\nmodule.exports = {\n  clientAppRootComponentFiles: path.resolve(\n    __dirname,\n    './path/to/RootComponent.vue'\n  ),\n}\n```\n\n### clientAppSetupFiles\n\n- 类型： `string | string[] | ((app: App) => string | string[] | Promise<string | string[]>)`\n\n- 详情：\n\n  Client App Setup 文件路径。\n\n  该 Hook 接收文件绝对路径，或者一个返回路径的函数。\n\n  该 Hook 中的文件会在客户端 App 的 [setup](https://v3.vuejs.org/guide/composition-api-setup.html) 函数中被调用。\n\n- 示例：\n\n```js\nconst { path } = require('@vuepress/utils')\n\nmodule.exports = {\n  clientAppSetupFiles: path.resolve(__dirname, './path/to/clientAppSetup.js'),\n}\n```\n\n- 参考：\n  - [客户端 API > defineClientAppSetup](./client-api.md#defineclientappsetup)\n\n## 生命周期 Hooks\n\n### onInitialized\n\n- 类型： `(app: App) => void | Promise<void>`\n\n- 详情：\n\n  该 Hook 会在 VuePress App 初始化后被立即调用。\n\n### onPrepared\n\n- 类型： `(app: App) => void | Promise<void>`\n\n- 详情：\n\n  该 Hook 会在 VuePress App 完成文件准备后被立即调用。\n\n### onWatched\n\n- 类型： `(app: App, watchers: Closable[], restart: () => Promise<void>) => void | Promise<void>`\n\n- 详情：\n\n  该 Hook 会在 VuePress App 启动开发服务器并开始监听文件修改后被调用。\n\n  `watchers` 是一个文件监听器的数组。在修改配置文件导致重启 dev 命令时，这些监听器会被自动关闭。如果你在当前 Hook 中添加了新的监听器，你应该把它们也加入到这个数组中，确保在重启 dev 命令时它们能被正确关闭。\n\n  `restart` 方法用来重启 dev 命令。调用该方法时， `watchers` 数组中的监听器也会被自动关闭。\n\n### onGenerated\n\n- 类型： `(app: App) => void | Promise<void>`\n\n- 详情：\n\n  该 Hook 会在 VuePress App 完成静态文件生成后被立即调用。\n"}},91091:(n,s,e)=>{e.r(s),e.d(s,{default:()=>M});var a=e(66252);const p=(0,a._)("h1",{id:"插件-api",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#插件-api","aria-hidden":"true"},"#"),(0,a.Uk)(" 插件 API")],-1),l=(0,a.Uk)("插件 API 是由 "),o=(0,a._)("a",{href:"https://www.npmjs.com/package/@vuepress/core",target:"_blank",rel:"noopener noreferrer"},"@vuepress/core",-1),r=(0,a.Uk)(" 包支持的。你可以查看 "),t=(0,a.Uk)("Node API"),i=(0,a.Uk)(" 来了解如何使用插件 Hooks 中的 VuePress App 实例。"),c=(0,a.uE)('<h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>插件需要在初始化之前使用。基础配置项会在使用插件时立即被处理：</p><ul><li><a href="#name">name</a></li><li><a href="#multiple">multiple</a></li></ul><p>下列 Hooks 会在初始化 App 时处理：</p><ul><li><a href="#extendsmarkdownoptions">extendsMarkdownOptions</a></li><li><a href="#extendsmarkdown">extendsMarkdown</a></li><li><a href="#extendspageoptions">extendsPageOptions</a></li><li><a href="#extendspage">extendsPage</a></li><li><a href="#oninitialized">onInitialized</a></li></ul><p>下列 Hooks 会在准备文件时处理：</p><ul><li><a href="#clientappenhancefiles">clientAppEnhanceFiles</a></li><li><a href="#clientapprootcomponentfiles">clientAppRootComponentFiles</a></li><li><a href="#clientappsetupfiles">clientAppSetupFiles</a></li><li><a href="#onprepared">onPrepared</a></li></ul><p>下列 Hooks 会在 dev / build 时处理：</p><ul><li><a href="#alias">alias</a></li><li><a href="#define">define</a></li><li><a href="#onwatched">onWatched</a></li><li><a href="#ongenerated">onGenerated</a></li></ul>',9),D=(0,a.Uk)("查看 "),d=(0,a.Uk)("深入 > 架构 > 核心流程与 Hooks"),u=(0,a.Uk)(" 来更好地理解该流程。"),y=(0,a.uE)('<h2 id="基础配置项" tabindex="-1"><a class="header-anchor" href="#基础配置项" aria-hidden="true">#</a> 基础配置项</h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>插件的名称。</p><p>它会被用来识别插件，以避免多次使用同一个插件，因此应确保你的插件名称是独一无二的。</p><p>它应遵从如下命名约定：</p><ul><li>非 Scoped: <code>vuepress-plugin-foo</code></li><li>Scoped: <code>@org/vuepress-plugin-foo</code></li></ul></li><li><p>参考：</p><ul><li><a href="#multiple">插件 API &gt; multiple</a></li></ul></li></ul><h3 id="multiple" tabindex="-1"><a class="header-anchor" href="#multiple" aria-hidden="true">#</a> multiple</h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>默认值： <code>false</code></p></li><li><p>详情：</p><p>插件是否能够被多次使用。</p><p>如果设置为 <code>false</code> ，当有相同名称的插件被使用时，先使用的会被后使用的替换掉。</p><p>如果设置为 <code>true</code> ，相同名称的插件可以被多次使用且不会被替换。</p></li><li><p>参考：</p><ul><li><a href="#name">插件 API &gt; name</a></li></ul></li></ul><h2 id="开发-hooks" tabindex="-1"><a class="header-anchor" href="#开发-hooks" aria-hidden="true">#</a> 开发 Hooks</h2><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h3><ul><li><p>类型： <code>Record&lt;string, any&gt; | ((app: App) =&gt; Record&lt;string, any&gt;)</code></p></li><li><p>详情：</p><p>定义路径别名。</p><p>该 Hook 接收一个对象，或者一个返回对象的函数。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">alias:</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;@alias&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;./path/to/alias&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> define</h3><ul><li><p>类型： <code>Record&lt;string, any&gt; | ((app: App) =&gt; Record&lt;string, any&gt;)</code></p></li><li><p>详情：</p><p>定义全局常量。</p><p>该 Hook 接收一个对象，或者一个返回对象的函数。</p><p>它可以被用于向客户端文件传递变量。注意这里的值都会自动被 <code>JSON.stringify()</code> 处理。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">define:</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__GLOBAL_BOOLEAN__:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__GLOBAL_STRING__:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;foobar&#39;</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__GLOBAL_OBJECT__:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">foo:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;bar&#39;</span><span style="color:#D4D4D4;"> },</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="extendsmarkdownoptions" tabindex="-1"><a class="header-anchor" href="#extendsmarkdownoptions" aria-hidden="true">#</a> extendsMarkdownOptions</h3><ul><li><p>类型： <code>(options: MarkdownOptions, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>Markdown 配置项扩展。</p><p>该 Hook 接收一个函数，在参数中会收到 Markdown 配置项。</p><p>该 Hook 可以用于修改 Markdown 配置项。</p></li><li><p>示例：</p></li></ul><p>修改默认提取的子标题层级：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsMarkdownOptions</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;"> ?? {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">level</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">level</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',16),m=(0,a.Uk)("参考： "),h=(0,a.Uk)("配置 > markdown"),C=(0,a.uE)('<h3 id="extendsmarkdown" tabindex="-1"><a class="header-anchor" href="#extendsmarkdown" aria-hidden="true">#</a> extendsMarkdown</h3><ul><li><p>类型： <code>(md: Markdown, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>Markdown 增强。</p><p>该 Hook 接收一个函数，在参数中会收到一个由 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 提供的 <code>Markdown</code> 实例。</p><p>该 Hook 可以用来添加额外的 markdown-it 插件、应用额外的自定义功能。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsMarkdown</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">md</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">md</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">plugin1</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">md</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">linkify</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">fuzzyEmail:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;"> })</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="extendspageoptions" tabindex="-1"><a class="header-anchor" href="#extendspageoptions" aria-hidden="true">#</a> extendsPageOptions</h3><ul><li><p>类型： <code>(options: PageOptions, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>页面配置项扩展。</p><p>该 Hook 接收一个函数，在参数中会收到 <code>createPage</code> 传入的配置项。</p><p>该 Hook 可以用于修改页面配置项。</p></li><li><p>示例：</p></li></ul><p>为 <code>_posts</code> 目录下的页面设置永久链接 Pattern ：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsPageOptions</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">filePath</span><span style="color:#D4D4D4;">?.</span><span style="color:#DCDCAA;">startsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dir</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">source</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;_posts/&#39;</span><span style="color:#D4D4D4;">))) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">frontmatter</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">frontmatter</span><span style="color:#D4D4D4;"> ?? {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">frontmatter</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">permalinkPattern</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;/:year/:month/:day/:slug.html&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',7),g=(0,a.Uk)("参考： "),b=(0,a.Uk)("Node API > Page > createPage"),k=(0,a.uE)('<h3 id="extendspage" tabindex="-1"><a class="header-anchor" href="#extendspage" aria-hidden="true">#</a> extendsPage</h3><ul><li><p>类型： <code>(page: Page, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>页面扩展。</p><p>该 Hook 接收一个函数，在参数中会收到一个 <code>Page</code> 实例。</p><p>该 Hook 可以用来在 Page 对象上添加额外的属性，或修改现有的属性等。</p><p>值得一提的是，针对 <code>page.data</code> 和 <code>page.routeMeta</code> 的改动可以在客户端代码中使用。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsPage</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;foo&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;bar&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在客户端组件中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">usePageData</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vuepress/client&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">setup</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">page</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">usePageData</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// bar</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',5),v=(0,a.Uk)("参考： "),E=(0,a.Uk)("客户端 API > usePageData"),f=(0,a.Uk)("Node API > Page 属性 > data"),A=(0,a.Uk)("Node API > Page 属性 > routeMeta"),x=(0,a.uE)('<h2 id="客户端文件-hooks" tabindex="-1"><a class="header-anchor" href="#客户端文件-hooks" aria-hidden="true">#</a> 客户端文件 Hooks</h2><h3 id="clientappenhancefiles" tabindex="-1"><a class="header-anchor" href="#clientappenhancefiles" aria-hidden="true">#</a> clientAppEnhanceFiles</h3><ul><li><p>类型： <code>string | string[] | ((app: App) =&gt; string | string[] | Promise&lt;string | string[]&gt;)</code></p></li><li><p>详情：</p><p>Client App Enhancement 文件路径。</p><p>该 Hook 接收文件绝对路径，或者一个返回路径的函数。</p><p>该 Hook 中的文件会在客户端 App 创建后被调用，用以对其进行一些增强。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clientAppEnhanceFiles:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;./path/to/clientAppEnhance.js&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  ),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',4),P=(0,a.Uk)("参考： "),F=(0,a.Uk)("客户端 API > defineClientAppEnhance"),w=(0,a.Uk)("Cookbook > Client App Enhance 的使用方法"),_=(0,a.uE)('<h3 id="clientapprootcomponentfiles" tabindex="-1"><a class="header-anchor" href="#clientapprootcomponentfiles" aria-hidden="true">#</a> clientAppRootComponentFiles</h3><ul><li><p>类型： <code>string | string[] | ((app: App) =&gt; string | string[] | Promise&lt;string | string[]&gt;)</code></p></li><li><p>详情：</p><p>Client Root Component 文件路径。</p><p>该 Hook 接收文件绝对路径，或者一个返回路径的函数。</p><p>该 Hook 中的组件会被渲染到客户端 App 的根节点。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clientAppRootComponentFiles:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;./path/to/RootComponent.vue&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  ),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="clientappsetupfiles" tabindex="-1"><a class="header-anchor" href="#clientappsetupfiles" aria-hidden="true">#</a> clientAppSetupFiles</h3><ul><li><p>类型： <code>string | string[] | ((app: App) =&gt; string | string[] | Promise&lt;string | string[]&gt;)</code></p></li><li><p>详情：</p><p>Client App Setup 文件路径。</p><p>该 Hook 接收文件绝对路径，或者一个返回路径的函数。</p><p>该 Hook 中的文件会在客户端 App 的 <a href="https://v3.vuejs.org/guide/composition-api-setup.html" target="_blank" rel="noopener noreferrer">setup</a> 函数中被调用。</p></li><li><p>示例：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clientAppSetupFiles:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;./path/to/clientAppSetup.js&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',6),H=(0,a.Uk)("参考： "),O=(0,a.Uk)("客户端 API > defineClientAppSetup"),B=(0,a.uE)('<h2 id="生命周期-hooks" tabindex="-1"><a class="header-anchor" href="#生命周期-hooks" aria-hidden="true">#</a> 生命周期 Hooks</h2><h3 id="oninitialized" tabindex="-1"><a class="header-anchor" href="#oninitialized" aria-hidden="true">#</a> onInitialized</h3><ul><li><p>类型： <code>(app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>该 Hook 会在 VuePress App 初始化后被立即调用。</p></li></ul><h3 id="onprepared" tabindex="-1"><a class="header-anchor" href="#onprepared" aria-hidden="true">#</a> onPrepared</h3><ul><li><p>类型： <code>(app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>该 Hook 会在 VuePress App 完成文件准备后被立即调用。</p></li></ul><h3 id="onwatched" tabindex="-1"><a class="header-anchor" href="#onwatched" aria-hidden="true">#</a> onWatched</h3><ul><li><p>类型： <code>(app: App, watchers: Closable[], restart: () =&gt; Promise&lt;void&gt;) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>该 Hook 会在 VuePress App 启动开发服务器并开始监听文件修改后被调用。</p><p><code>watchers</code> 是一个文件监听器的数组。在修改配置文件导致重启 dev 命令时，这些监听器会被自动关闭。如果你在当前 Hook 中添加了新的监听器，你应该把它们也加入到这个数组中，确保在重启 dev 命令时它们能被正确关闭。</p><p><code>restart</code> 方法用来重启 dev 命令。调用该方法时， <code>watchers</code> 数组中的监听器也会被自动关闭。</p></li></ul><h3 id="ongenerated" tabindex="-1"><a class="header-anchor" href="#ongenerated" aria-hidden="true">#</a> onGenerated</h3><ul><li><p>类型： <code>(app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>详情：</p><p>该 Hook 会在 VuePress App 完成静态文件生成后被立即调用。</p></li></ul>',9),j={},M=(0,e(83744).Z)(j,[["render",function(n,s){const e=(0,a.up)("NpmBadge"),j=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[p,(0,a.Wm)(e,{package:"@vuepress/core"}),(0,a._)("p",null,[l,o,r,(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/node-api.html"},{default:(0,a.w5)((()=>[t])),_:1}),i]),c,(0,a._)("blockquote",null,[(0,a._)("p",null,[D,(0,a.Wm)(j,{to:"/zh/vuepress-next/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:(0,a.w5)((()=>[d])),_:1}),u])]),y,(0,a._)("ul",null,[(0,a._)("li",null,[m,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/config.html#markdown"},{default:(0,a.w5)((()=>[h])),_:1})])])])]),C,(0,a._)("ul",null,[(0,a._)("li",null,[g,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/node-api.html#createPage"},{default:(0,a.w5)((()=>[b])),_:1})])])])]),k,(0,a._)("ul",null,[(0,a._)("li",null,[v,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/client-api.html#usepagedata"},{default:(0,a.w5)((()=>[E])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/node-api.html#data"},{default:(0,a.w5)((()=>[f])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/node-api.html#routemeta"},{default:(0,a.w5)((()=>[A])),_:1})])])])]),x,(0,a._)("ul",null,[(0,a._)("li",null,[P,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/client-api.html#defineclientappenhance"},{default:(0,a.w5)((()=>[F])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/advanced/cookbook/usage-of-client-app-enhance.html"},{default:(0,a.w5)((()=>[w])),_:1})])])])]),_,(0,a._)("ul",null,[(0,a._)("li",null,[H,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(j,{to:"/zh/vuepress-next/reference/client-api.html#defineclientappsetup"},{default:(0,a.w5)((()=>[O])),_:1})])])])]),B],64)}]])}}]);