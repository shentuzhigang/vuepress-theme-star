"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6011],{33619:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-18a799b0",path:"/vuepress-next/reference/plugin-api.html",title:"Plugin API",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Overview",slug:"overview",children:[]},{level:2,title:"Basic Options",slug:"basic-options",children:[{level:3,title:"name",slug:"name",children:[]},{level:3,title:"multiple",slug:"multiple",children:[]}]},{level:2,title:"Development Hooks",slug:"development-hooks",children:[{level:3,title:"alias",slug:"alias",children:[]},{level:3,title:"define",slug:"define",children:[]},{level:3,title:"extendsMarkdownOptions",slug:"extendsmarkdownoptions",children:[]},{level:3,title:"extendsMarkdown",slug:"extendsmarkdown",children:[]},{level:3,title:"extendsPageOptions",slug:"extendspageoptions",children:[]},{level:3,title:"extendsPage",slug:"extendspage",children:[]}]},{level:2,title:"Client Files Hooks",slug:"client-files-hooks",children:[{level:3,title:"clientAppEnhanceFiles",slug:"clientappenhancefiles",children:[]},{level:3,title:"clientAppRootComponentFiles",slug:"clientapprootcomponentfiles",children:[]},{level:3,title:"clientAppSetupFiles",slug:"clientappsetupfiles",children:[]}]},{level:2,title:"Lifecycle Hooks",slug:"lifecycle-hooks",children:[{level:3,title:"onInitialized",slug:"oninitialized",children:[]},{level:3,title:"onPrepared",slug:"onprepared",children:[]},{level:3,title:"onWatched",slug:"onwatched",children:[]},{level:3,title:"onGenerated",slug:"ongenerated",children:[]}]}],git:{updatedTime:1639839959e3,contributors:[{name:"Starzkg",email:"1600337300@qq.com",commits:1},{name:"shentuzhigang",email:"shentuzhigang@moresec.cn",commits:1}]},readingTime:{minutes:3.57,words:1070},filePathRelative:"vuepress-next/reference/plugin-api.md",content:"# Plugin API\n\n<NpmBadge package=\"@vuepress/core\" />\n\nPlugin API is supported by [@vuepress/core](https://www.npmjs.com/package/@vuepress/core) package. You could check out [Node API](./node-api.md) for how to use the VuePress app instance in plugin hooks.\n\n## Overview\n\nPlugins should be used before initialization. The basic options will be handled once the plugin is used:\n\n- [name](#name)\n- [multiple](#multiple)\n\nThe following hooks will be processed when initializing app:\n\n- [extendsMarkdownOptions](#extendsmarkdownoptions)\n- [extendsMarkdown](#extendsmarkdown)\n- [extendsPageOptions](#extendspageoptions)\n- [extendsPage](#extendspage)\n- [onInitialized](#oninitialized)\n\nThe following hooks will be processed when preparing files:\n\n- [clientAppEnhanceFiles](#clientappenhancefiles)\n- [clientAppRootComponentFiles](#clientapprootcomponentfiles)\n- [clientAppSetupFiles](#clientappsetupfiles)\n- [onPrepared](#onprepared)\n\nThe following hooks will be processed in dev / build:\n\n- [alias](#alias)\n- [define](#define)\n- [onWatched](#onwatched)\n- [onGenerated](#ongenerated)\n\n> Check out [Advanced > Architecture > Core Process and Hooks](../advanced/architecture.md#core-process-and-hooks) to understand the process better.\n\n## Basic Options\n\n### name\n\n- Type: `string`\n\n- Details:\n\n  Name of the plugin.\n\n  It will be used for identifying plugins to avoid using a same plugin multiple times, so make sure to use a unique plugin name.\n\n  It should follow the naming convention:\n\n  - Non-scoped: `vuepress-plugin-foo`\n  - Scoped: `@org/vuepress-plugin-foo`\n\n- Also see:\n  - [Plugin API > multiple](#multiple)\n\n### multiple\n\n- Type: `boolean`\n\n- Default: `false`\n\n- Details:\n\n  Declare whether the plugin can be used multiple times.\n\n  If set to `false`, when using plugins with the same name, the one used previously will be replaced by the one used later.\n\n  If set to `true`, plugins with the same name could be used multiple times and won't be replaced.\n\n- Also see:\n  - [Plugin API > name](#name)\n\n## Development Hooks\n\n### alias\n\n- Type: `Record<string, any> | ((app: App) => Record<string, any>)`\n\n- Details:\n\n  Path aliases definition.\n\n  This hook accepts an object or a function that returns an object.\n\n- Example:\n\n```js\nmodule.exports = {\n  alias: {\n    '@alias': path.resolve(__dirname, './path/to/alias'),\n  },\n}\n```\n\n### define\n\n- Type: `Record<string, any> | ((app: App) => Record<string, any>)`\n\n- Details:\n\n  Define global constants replacements.\n\n  This hook accepts an object or a function that returns an object.\n\n  This can be useful for passing variables to client files. Note that the values will be automatically processed by `JSON.stringify()`.\n\n- Example:\n\n```js\nmodule.exports = {\n  define: {\n    __GLOBAL_BOOLEAN__: true,\n    __GLOBAL_STRING__: 'foobar',\n    __GLOBAL_OBJECT__: { foo: 'bar' },\n  },\n}\n```\n\n### extendsMarkdownOptions\n\n- Type: `(options: MarkdownOptions, app: App) => void | Promise<void>`\n\n- Details:\n\n  Markdown options extension.\n\n  This hook accepts a function that will receive the markdown options.\n\n  This hook can be used for modifying markdown options.\n\n- Example:\n\nModifying the default header levels that going to be extracted:\n\n```js\nmodule.exports = {\n  extendsMarkdownOptions: (markdownOptions, app) => {\n    if (markdownOptions.extractHeaders === false) return\n    markdownOptions.extractHeaders = markdownOptions.extractHeaders ?? {}\n    if (markdownOptions.extractHeaders.level) return\n    markdownOptions.extractHeaders.level = [2, 3, 4, 5, 6]\n  },\n}\n```\n\n- Also see:\n  - [Config > markdown](./config.md#markdown)\n\n### extendsMarkdown\n\n- Type: `(md: Markdown, app: App) => void | Promise<void>`\n\n- Details:\n\n  Markdown enhancement.\n\n  This hook accepts a function that will receive an instance of `Markdown` powered by [markdown-it](https://github.com/markdown-it/markdown-it) in its arguments.\n\n  This hook can be used for using extra markdown-it plugins and implementing customizations.\n\n- Example:\n\n```js\nmodule.exports = {\n  extendsMarkdown: (md) => {\n    md.use(plugin1)\n    md.linkify.set({ fuzzyEmail: false })\n  },\n}\n```\n\n### extendsPageOptions\n\n- Type: `(options: PageOptions, app: App) => void | Promise<void>`\n\n- Details:\n\n  Page options extension.\n\n  This hook accepts a function that will receive the options of `createPage`.\n  \n  This hook can be used for modifying page options\n\n- Example:\n\nSet permalink pattern for pages in `_posts` directory:\n\n```js\nmodule.exports = {\n  extendsPageOptions: (pageOptions, app) => {\n    if (pageOptions.filePath?.startsWith(app.dir.source('_posts/'))) {\n      pageOptions.frontmatter = pageOptions.frontmatter ?? {}\n      pageOptions.frontmatter.permalinkPattern = '/:year/:month/:day/:slug.html'\n    }\n  },\n}\n```\n\n- Also see:\n  - [Node API > Page > createPage](./node-api.md#createpage)\n\n### extendsPage\n\n- Type: `(page: Page, app: App) => void | Promise<void>`\n\n- Details:\n\n  Page extension.\n\n  This hook accepts a function that will receive a `Page` instance.\n\n  This hook can be used for adding extra properties or modifying current properties on `Page` object.\n\n  Notice that changes to `page.data` and `page.routeMeta` can be used in client side code.\n\n- Example:\n\n```js\nmodule.exports = {\n  extendsPage: (page) => {\n    page.foo = 'foo'\n    page.data.bar = 'bar'\n  },\n}\n```\n\nIn client component:\n\n```js\nimport { usePageData } from '@vuepress/client'\n\nexport default {\n  setup() {\n    const page = usePageData()\n    console.log(page.value.bar) // bar\n  },\n}\n```\n\n- Also see:\n  - [Client API > usePageData](./client-api.md#usepagedata)\n  - [Node API > Page Properties > data](./node-api.md#data)\n  - [Node API > Page Properties > routeMeta](./node-api.md#routemeta)\n\n## Client Files Hooks\n\n### clientAppEnhanceFiles\n\n- Type: `string | string[] | ((app: App) => string | string[] | Promise<string | string[]>)`\n\n- Details:\n\n  Paths of client app enhancement files.\n\n  This hook accepts absolute file paths, or a function that returns the paths.\n\n  Files listed in this hook will be invoked after the client app is created to make some enhancement to it.\n\n- Example:\n\n```js\nconst { path } = require('@vuepress/utils')\n\nmodule.exports = {\n  clientAppEnhanceFiles: path.resolve(\n    __dirname,\n    './path/to/clientAppEnhance.js'\n  ),\n}\n```\n\n- Also see:\n  - [Client API > defineClientAppEnhance](./client-api.md#defineclientappenhance)\n  - [Cookbook > Usage of Client App Enhance](../advanced/cookbook/usage-of-client-app-enhance.md)\n\n### clientAppRootComponentFiles\n\n- Type: `string | string[] | ((app: App) => string | string[] | Promise<string | string[]>)`\n\n- Details:\n\n  Paths of client app root component files.\n\n  This hook accepts absolute file paths, or a function that returns the paths.\n\n  Components listed in this hook will be rendered to the root node of the client app.\n\n- Example:\n\n```js\nconst { path } = require('@vuepress/utils')\n\nmodule.exports = {\n  clientAppRootComponentFiles: path.resolve(\n    __dirname,\n    './path/to/RootComponent.vue'\n  ),\n}\n```\n\n### clientAppSetupFiles\n\n- Type: `string | string[] | ((app: App) => string | string[] | Promise<string | string[]>)`\n\n- Details:\n\n  Paths of client app setup files.\n\n  This hook accepts absolute file paths, or a function that returns the paths.\n\n  Files listed in this hook will be invoked in the [setup](https://v3.vuejs.org/guide/composition-api-setup.html) function of the client app.\n\n- Example:\n\n```js\nconst { path } = require('@vuepress/utils')\n\nmodule.exports = {\n  clientAppSetupFiles: path.resolve(__dirname, './path/to/clientAppSetup.js'),\n}\n```\n\n- Also see:\n  - [Client API > defineClientAppSetup](./client-api.md#defineclientappsetup)\n\n## Lifecycle Hooks\n\n### onInitialized\n\n- Type: `(app: App) => void | Promise<void>`\n\n- Details:\n\n  This hook will be invoked once VuePress app has been initialized.\n\n### onPrepared\n\n- Type: `(app: App) => void | Promise<void>`\n\n- Details:\n\n  This hook will be invoked once VuePress app has finished preparation.\n\n### onWatched\n\n- Type: `(app: App, watchers: Closable[], restart: () => Promise<void>) => void | Promise<void>`\n\n- Details:\n\n  This hook will be invoked once VuePress app has started dev-server and watched files change.\n\n  The `watchers` is an array of file watchers. When changing config file, the dev command will be restarted and those watchers will be closed. If you are adding new watchers in this hook, you should push your watchers to the `watchers` array, so that they can be closed correctly when restarting.\n\n  The `restart` is a method to restart the dev command. When calling this method, the `watchers` array will be closed automatically.\n\n### onGenerated\n\n- Type: `(app: App) => void | Promise<void>`\n\n- Details:\n\n  This hook will be invoked once VuePress app has generated static files.\n"}},71566:(n,e,s)=>{s.r(e),s.d(e,{default:()=>B});var a=s(66252);const l=(0,a._)("h1",{id:"plugin-api",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#plugin-api","aria-hidden":"true"},"#"),(0,a.Uk)(" Plugin API")],-1),p=(0,a.Uk)("Plugin API is supported by "),o=(0,a._)("a",{href:"https://www.npmjs.com/package/@vuepress/core",target:"_blank",rel:"noopener noreferrer"},"@vuepress/core",-1),t=(0,a.Uk)(" package. You could check out "),i=(0,a.Uk)("Node API"),r=(0,a.Uk)(" for how to use the VuePress app instance in plugin hooks."),c=(0,a.uE)('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>Plugins should be used before initialization. The basic options will be handled once the plugin is used:</p><ul><li><a href="#name">name</a></li><li><a href="#multiple">multiple</a></li></ul><p>The following hooks will be processed when initializing app:</p><ul><li><a href="#extendsmarkdownoptions">extendsMarkdownOptions</a></li><li><a href="#extendsmarkdown">extendsMarkdown</a></li><li><a href="#extendspageoptions">extendsPageOptions</a></li><li><a href="#extendspage">extendsPage</a></li><li><a href="#oninitialized">onInitialized</a></li></ul><p>The following hooks will be processed when preparing files:</p><ul><li><a href="#clientappenhancefiles">clientAppEnhanceFiles</a></li><li><a href="#clientapprootcomponentfiles">clientAppRootComponentFiles</a></li><li><a href="#clientappsetupfiles">clientAppSetupFiles</a></li><li><a href="#onprepared">onPrepared</a></li></ul><p>The following hooks will be processed in dev / build:</p><ul><li><a href="#alias">alias</a></li><li><a href="#define">define</a></li><li><a href="#onwatched">onWatched</a></li><li><a href="#ongenerated">onGenerated</a></li></ul>',9),d=(0,a.Uk)("Check out "),D=(0,a.Uk)("Advanced > Architecture > Core Process and Hooks"),u=(0,a.Uk)(" to understand the process better."),h=(0,a.uE)('<h2 id="basic-options" tabindex="-1"><a class="header-anchor" href="#basic-options" aria-hidden="true">#</a> Basic Options</h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><ul><li><p>Type: <code>string</code></p></li><li><p>Details:</p><p>Name of the plugin.</p><p>It will be used for identifying plugins to avoid using a same plugin multiple times, so make sure to use a unique plugin name.</p><p>It should follow the naming convention:</p><ul><li>Non-scoped: <code>vuepress-plugin-foo</code></li><li>Scoped: <code>@org/vuepress-plugin-foo</code></li></ul></li><li><p>Also see:</p><ul><li><a href="#multiple">Plugin API &gt; multiple</a></li></ul></li></ul><h3 id="multiple" tabindex="-1"><a class="header-anchor" href="#multiple" aria-hidden="true">#</a> multiple</h3><ul><li><p>Type: <code>boolean</code></p></li><li><p>Default: <code>false</code></p></li><li><p>Details:</p><p>Declare whether the plugin can be used multiple times.</p><p>If set to <code>false</code>, when using plugins with the same name, the one used previously will be replaced by the one used later.</p><p>If set to <code>true</code>, plugins with the same name could be used multiple times and won&#39;t be replaced.</p></li><li><p>Also see:</p><ul><li><a href="#name">Plugin API &gt; name</a></li></ul></li></ul><h2 id="development-hooks" tabindex="-1"><a class="header-anchor" href="#development-hooks" aria-hidden="true">#</a> Development Hooks</h2><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h3><ul><li><p>Type: <code>Record&lt;string, any&gt; | ((app: App) =&gt; Record&lt;string, any&gt;)</code></p></li><li><p>Details:</p><p>Path aliases definition.</p><p>This hook accepts an object or a function that returns an object.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">alias:</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;@alias&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;./path/to/alias&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> define</h3><ul><li><p>Type: <code>Record&lt;string, any&gt; | ((app: App) =&gt; Record&lt;string, any&gt;)</code></p></li><li><p>Details:</p><p>Define global constants replacements.</p><p>This hook accepts an object or a function that returns an object.</p><p>This can be useful for passing variables to client files. Note that the values will be automatically processed by <code>JSON.stringify()</code>.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">define:</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__GLOBAL_BOOLEAN__:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__GLOBAL_STRING__:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;foobar&#39;</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__GLOBAL_OBJECT__:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">foo:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;bar&#39;</span><span style="color:#D4D4D4;"> },</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="extendsmarkdownoptions" tabindex="-1"><a class="header-anchor" href="#extendsmarkdownoptions" aria-hidden="true">#</a> extendsMarkdownOptions</h3><ul><li><p>Type: <code>(options: MarkdownOptions, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>Markdown options extension.</p><p>This hook accepts a function that will receive the markdown options.</p><p>This hook can be used for modifying markdown options.</p></li><li><p>Example:</p></li></ul><p>Modifying the default header levels that going to be extracted:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsMarkdownOptions</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;"> ?? {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">level</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">markdownOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">extractHeaders</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">level</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',16),y=(0,a.Uk)("Also see: "),m=(0,a.Uk)("Config > markdown"),g=(0,a.uE)('<h3 id="extendsmarkdown" tabindex="-1"><a class="header-anchor" href="#extendsmarkdown" aria-hidden="true">#</a> extendsMarkdown</h3><ul><li><p>Type: <code>(md: Markdown, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>Markdown enhancement.</p><p>This hook accepts a function that will receive an instance of <code>Markdown</code> powered by <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> in its arguments.</p><p>This hook can be used for using extra markdown-it plugins and implementing customizations.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsMarkdown</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">md</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">md</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">use</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">plugin1</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">md</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">linkify</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">fuzzyEmail:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;"> })</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="extendspageoptions" tabindex="-1"><a class="header-anchor" href="#extendspageoptions" aria-hidden="true">#</a> extendsPageOptions</h3><ul><li><p>Type: <code>(options: PageOptions, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>Page options extension.</p><p>This hook accepts a function that will receive the options of <code>createPage</code>.</p><p>This hook can be used for modifying page options</p></li><li><p>Example:</p></li></ul><p>Set permalink pattern for pages in <code>_posts</code> directory:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsPageOptions</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">filePath</span><span style="color:#D4D4D4;">?.</span><span style="color:#DCDCAA;">startsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dir</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">source</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;_posts/&#39;</span><span style="color:#D4D4D4;">))) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">frontmatter</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">frontmatter</span><span style="color:#D4D4D4;"> ?? {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">pageOptions</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">frontmatter</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">permalinkPattern</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;/:year/:month/:day/:slug.html&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',7),b=(0,a.Uk)("Also see: "),f=(0,a.Uk)("Node API > Page > createPage"),C=(0,a.uE)('<h3 id="extendspage" tabindex="-1"><a class="header-anchor" href="#extendspage" aria-hidden="true">#</a> extendsPage</h3><ul><li><p>Type: <code>(page: Page, app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>Page extension.</p><p>This hook accepts a function that will receive a <code>Page</code> instance.</p><p>This hook can be used for adding extra properties or modifying current properties on <code>Page</code> object.</p><p>Notice that changes to <code>page.data</code> and <code>page.routeMeta</code> can be used in client side code.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">extendsPage</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">foo</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;foo&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;bar&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In client component:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">usePageData</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vuepress/client&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">setup</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">page</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">usePageData</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">page</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bar</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// bar</span></span>\n<span class="line"><span style="color:#D4D4D4;">  },</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',5),k=(0,a.Uk)("Also see: "),v=(0,a.Uk)("Client API > usePageData"),w=(0,a.Uk)("Node API > Page Properties > data"),E=(0,a.Uk)("Node API > Page Properties > routeMeta"),x=(0,a.uE)('<h2 id="client-files-hooks" tabindex="-1"><a class="header-anchor" href="#client-files-hooks" aria-hidden="true">#</a> Client Files Hooks</h2><h3 id="clientappenhancefiles" tabindex="-1"><a class="header-anchor" href="#clientappenhancefiles" aria-hidden="true">#</a> clientAppEnhanceFiles</h3><ul><li><p>Type: <code>string | string[] | ((app: App) =&gt; string | string[] | Promise&lt;string | string[]&gt;)</code></p></li><li><p>Details:</p><p>Paths of client app enhancement files.</p><p>This hook accepts absolute file paths, or a function that returns the paths.</p><p>Files listed in this hook will be invoked after the client app is created to make some enhancement to it.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clientAppEnhanceFiles:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;./path/to/clientAppEnhance.js&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  ),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',4),A=(0,a.Uk)("Also see: "),P=(0,a.Uk)("Client API > defineClientAppEnhance"),F=(0,a.Uk)("Cookbook > Usage of Client App Enhance"),_=(0,a.uE)('<h3 id="clientapprootcomponentfiles" tabindex="-1"><a class="header-anchor" href="#clientapprootcomponentfiles" aria-hidden="true">#</a> clientAppRootComponentFiles</h3><ul><li><p>Type: <code>string | string[] | ((app: App) =&gt; string | string[] | Promise&lt;string | string[]&gt;)</code></p></li><li><p>Details:</p><p>Paths of client app root component files.</p><p>This hook accepts absolute file paths, or a function that returns the paths.</p><p>Components listed in this hook will be rendered to the root node of the client app.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clientAppRootComponentFiles:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">,</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;./path/to/RootComponent.vue&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  ),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="clientappsetupfiles" tabindex="-1"><a class="header-anchor" href="#clientappsetupfiles" aria-hidden="true">#</a> clientAppSetupFiles</h3><ul><li><p>Type: <code>string | string[] | ((app: App) =&gt; string | string[] | Promise&lt;string | string[]&gt;)</code></p></li><li><p>Details:</p><p>Paths of client app setup files.</p><p>This hook accepts absolute file paths, or a function that returns the paths.</p><p>Files listed in this hook will be invoked in the <a href="https://v3.vuejs.org/guide/composition-api-setup.html" target="_blank" rel="noopener noreferrer">setup</a> function of the client app.</p></li><li><p>Example:</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">path</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;@vuepress/utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clientAppSetupFiles:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">__dirname</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;./path/to/clientAppSetup.js&#39;</span><span style="color:#D4D4D4;">),</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',6),T=(0,a.Uk)("Also see: "),O=(0,a.Uk)("Client API > defineClientAppSetup"),j=(0,a.uE)('<h2 id="lifecycle-hooks" tabindex="-1"><a class="header-anchor" href="#lifecycle-hooks" aria-hidden="true">#</a> Lifecycle Hooks</h2><h3 id="oninitialized" tabindex="-1"><a class="header-anchor" href="#oninitialized" aria-hidden="true">#</a> onInitialized</h3><ul><li><p>Type: <code>(app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>This hook will be invoked once VuePress app has been initialized.</p></li></ul><h3 id="onprepared" tabindex="-1"><a class="header-anchor" href="#onprepared" aria-hidden="true">#</a> onPrepared</h3><ul><li><p>Type: <code>(app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>This hook will be invoked once VuePress app has finished preparation.</p></li></ul><h3 id="onwatched" tabindex="-1"><a class="header-anchor" href="#onwatched" aria-hidden="true">#</a> onWatched</h3><ul><li><p>Type: <code>(app: App, watchers: Closable[], restart: () =&gt; Promise&lt;void&gt;) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>This hook will be invoked once VuePress app has started dev-server and watched files change.</p><p>The <code>watchers</code> is an array of file watchers. When changing config file, the dev command will be restarted and those watchers will be closed. If you are adding new watchers in this hook, you should push your watchers to the <code>watchers</code> array, so that they can be closed correctly when restarting.</p><p>The <code>restart</code> is a method to restart the dev command. When calling this method, the <code>watchers</code> array will be closed automatically.</p></li></ul><h3 id="ongenerated" tabindex="-1"><a class="header-anchor" href="#ongenerated" aria-hidden="true">#</a> onGenerated</h3><ul><li><p>Type: <code>(app: App) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p>Details:</p><p>This hook will be invoked once VuePress app has generated static files.</p></li></ul>',9),I={},B=(0,s(83744).Z)(I,[["render",function(n,e){const s=(0,a.up)("NpmBadge"),I=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a.Wm)(s,{package:"@vuepress/core"}),(0,a._)("p",null,[p,o,t,(0,a.Wm)(I,{to:"/vuepress-next/reference/node-api.html"},{default:(0,a.w5)((()=>[i])),_:1}),r]),c,(0,a._)("blockquote",null,[(0,a._)("p",null,[d,(0,a.Wm)(I,{to:"/vuepress-next/advanced/architecture.html#core-process-and-hooks"},{default:(0,a.w5)((()=>[D])),_:1}),u])]),h,(0,a._)("ul",null,[(0,a._)("li",null,[y,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/config.html#markdown"},{default:(0,a.w5)((()=>[m])),_:1})])])])]),g,(0,a._)("ul",null,[(0,a._)("li",null,[b,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/node-api.html#createpage"},{default:(0,a.w5)((()=>[f])),_:1})])])])]),C,(0,a._)("ul",null,[(0,a._)("li",null,[k,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/client-api.html#usepagedata"},{default:(0,a.w5)((()=>[v])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/node-api.html#data"},{default:(0,a.w5)((()=>[w])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/node-api.html#routemeta"},{default:(0,a.w5)((()=>[E])),_:1})])])])]),x,(0,a._)("ul",null,[(0,a._)("li",null,[A,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/client-api.html#defineclientappenhance"},{default:(0,a.w5)((()=>[P])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/advanced/cookbook/usage-of-client-app-enhance.html"},{default:(0,a.w5)((()=>[F])),_:1})])])])]),_,(0,a._)("ul",null,[(0,a._)("li",null,[T,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(I,{to:"/vuepress-next/reference/client-api.html#defineclientappsetup"},{default:(0,a.w5)((()=>[O])),_:1})])])])]),j],64)}]])}}]);